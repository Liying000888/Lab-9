---
title: "Lab 9"
format: html
editor: "visual"
embed-resources: true
---


```{r}
install.packages("microbenchmark")
install.packages("parallel")
```
# Problem 1: Vectorization
```{r}
# Load necessary library for benchmarking
library(microbenchmark)
# Original function: fun1
fun1 <- function(n = 100, k = 4, lambda = 4) {
  x <- NULL
  for (i in 1:n){
    x <- rbind(x, rpois(k, lambda))    
  }
  return(x)
}
# Optimized function: fun1alt
fun1alt <- function(n = 100, k = 4, lambda = 4) {
  # Generate n x k matrix using vectorized rpois call
  matrix(rpois(n * k, lambda), nrow = n, ncol = k)
}
# Test whether the generated matrices have the same dimensions
set.seed(123)
mat1 <- fun1()
mat2 <- fun1alt()
# Check dimensions
print(dim(mat1))  # Should be 100 x 4
print(dim(mat2))  # Should also be 100 x 4
# Check if values inside the matrices follow similar distributions
summary(mat1)
summary(mat2)
# Benchmarking the speed of the two functions
microbenchmark::microbenchmark(
  fun1(),
  fun1alt()
)
```

# Problem 2
```{r}
# Original function
fun2 <- function(x) {
  apply(x, 2, max)
}
# Optimized version using max.col()
fun2alt <- function(x) {
  x[cbind(max.col(t(x), ties.method = "first"), 1:ncol(x))]
}
# Data Generating Process (10 x 10,000 matrix)
set.seed(1234)
x <- matrix(rnorm(1e4), nrow = 10)
# Check if the outputs are the same
identical(fun2(x), fun2alt(x))
# Benchmarking
library(microbenchmark)
microbenchmark(
  fun2(x),
  fun2alt(x)
)
```

# Problem 3
(1)
```{r}
my_boot <- function(dat, stat, R, ncpus = 1L) {
  # Getting the random indices
  n <- nrow(dat)
  idx <- matrix(sample.int(n, n*R, TRUE), nrow=n, ncol=R)
  # THIS FUNCTION NEEDS TO BE PARALELLIZED
  # EDIT THIS CODE:
  ans <- lapply(seq_len(R), function(i) {
    stat(dat[idx[,i], , drop=FALSE])
  })
  # Converting the list into a matrix
  ans <- do.call(rbind, ans)
  return(ans)
}
# Bootstrap of an OLS
my_stat <- function(d) coef(lm(y ~ x, data=d))
# DATA SIM
set.seed(1)
n <- 500; R <- 1e4
x <- cbind(rnorm(n)); y <- x*5 + rnorm(n)
# Checking if we get something similar as lm
ans0 <- confint(lm(y~x))
ans1 <- my_boot(dat = data.frame(x, y), my_stat, R = R, ncpus = 2L)
t(apply(ans1, 2, quantile, c(.025,.975)))
ans0
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 1L))
system.time(my_boot(dat = data.frame(x, y), my_stat, R = 4000, ncpus = 2L))
```